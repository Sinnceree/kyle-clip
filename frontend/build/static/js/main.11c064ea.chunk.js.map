{"version":3,"sources":["components/TwitchClip/TwitchClip.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TwitchClip","props","Grid","item","xs","className","onClick","playClip","slug","removeClip","src","thumbnail","alt","title","socket","socketIOClient","App","useState","clipsQueue","setClipsQueue","currentClip","setCurrentClip","clipsEnabled","setClipsEnabled","useEffect","on","data","console","log","type","clip","status","emit","lastClip","newClip","clipQueue","clips","Container","url","video_url","controls","onEnded","volume","container","spacing","map","thumbnail_url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSA6BeA,EAjBI,SAACC,GAClB,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,yBAAKC,UAAU,YACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,4BAAQC,QAAS,kBAAML,EAAMM,SAASN,EAAMO,QAA5C,QACA,4BAAQF,QAAS,kBAAML,EAAMQ,WAAWR,EAAMO,QAA9C,WAEF,yBAAKE,IAAKT,EAAMU,UAAWC,IAAI,WAEjC,yBAAKP,UAAU,SAASJ,EAAMY,UCbhCC,G,MAASC,IAAe,0CA8EfC,EA5EH,WAAO,IAAD,EACoBC,mBAAmB,IADvC,mBACTC,EADS,KACGC,EADH,OAEsBF,mBAAc,MAFpC,mBAETG,EAFS,KAEIC,EAFJ,OAGwBJ,oBAAkB,GAH1C,mBAGTK,EAHS,KAGKC,EAHL,KA6ChB,OAlBAC,qBAAU,WACRV,EAAOW,GAAG,WAAW,SAACC,GAEpB,OADAC,QAAQC,IAAIF,GACJA,EAAKG,MACX,IAAK,cACH,OAvBkBN,GAAgB,GAwBpC,IAAK,eACH,OAxBmBA,GAAgB,GAyBrC,IAAK,UACH,OAtBQ,SAACO,GACf,GAAIA,EAAM,CAGR,GAFKR,GAAcC,GAAgB,GAEf,MAAhBO,EAAKC,OACP,OAAOjB,EAAOkB,KAAK,UAAW,CAAEH,KAAM,WAAYI,SAAUH,IAG9DT,EAAeS,GACfH,QAAQC,IAAIE,IAaDI,CAAQR,EAAKI,MACtB,IAAK,YACH,OA1BU,SAACJ,GAAD,OAAoBP,EAAcO,GA0BrCS,CAAUT,EAAKU,OACxB,QACE,aAGL,IAGD,kBAACC,EAAA,EAAD,CAAWhC,UAAU,aACnB,yBAAKA,UAAU,OACb,kBAAC,IAAD,CACEA,UAAU,cAAciC,IAAqB,OAAhBlB,EAAuBA,EAAYmB,UAAY,GAE5EC,UAAQ,EACRC,QAAS,kBA7CIX,EA6CcV,EA7CAN,EAAOkB,KAAK,UAAW,CAAEH,KAAM,WAAYI,SAAUH,EAAKtB,OAAzE,IAACsB,GA8CbY,OAAQ,MAGZ,yBAAKrC,UAAU,oBACb,yBAAKA,UAAU,eAAf,mBACA,yBAAKA,UAAU,SACb,kBAACH,EAAA,EAAD,CAAMyC,WAAS,EAACC,QAAS,GACtB1B,GAAcA,EAAW2B,KAAI,SAACf,GAAD,OAC5B,kBAAC,EAAD,CACErB,WAAY,SAACD,GAAD,OAzDP,SAACsB,GAAD,OAAkBhB,EAAOkB,KAAK,UAAW,CAAEH,KAAM,aAAcC,KAAMA,IAyD5CrB,CAAWD,IACzCD,SAAU,SAACC,GAAD,OAzDP,SAACsB,GAAD,OAAkBhB,EAAOkB,KAAK,UAAW,CAAEH,KAAM,WAAYC,KAAMA,IAyD1CvB,CAASC,IACrCA,KAAMsB,EAAKtB,KACXG,UAAWmB,EAAKgB,cAChBjC,MAAOiB,EAAKjB,gBClERkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.11c064ea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ninterface TwitchClipInterface {\r\n  playClip: (slug: string) => void;\r\n  removeClip: (slug: string) => void;\r\n  thumbnail: string;\r\n  slug: string;\r\n  title: string;\r\n}\r\n\r\n\r\nconst TwitchClip = (props: TwitchClipInterface) => {\r\n  return (\r\n    <Grid item xs={2}>\r\n      <div className=\"clip-box\">\r\n        <div className=\"clip-img\">\r\n          <div className=\"clip-hover\">\r\n            <button onClick={() => props.playClip(props.slug)}>Play</button>\r\n            <button onClick={() => props.removeClip(props.slug)}>Remove</button>\r\n          </div>\r\n          <img src={props.thumbnail} alt=\"thumb\"/>\r\n        </div>\r\n        <div className=\"title\">{props.title}</div>\r\n      </div>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default TwitchClip;","import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport ReactPlayer from \"react-player\"\r\nimport TwitchClip from \"./components/TwitchClip/TwitchClip\";\r\n\r\nimport \"./assets/main.css\";\r\nconst socket = socketIOClient(\"https://kyle-twitchbot.herokuapp.com/\");\r\n\r\nconst App = () => {\r\n  const [clipsQueue, setClipsQueue] = useState<object[]>([]);\r\n  const [currentClip, setCurrentClip] = useState<any>(null);\r\n  const [clipsEnabled, setClipsEnabled] = useState<boolean>(false);\r\n\r\n  const removeClip = (clip: string) => socket.emit(\"message\", { type: \"removeClip\", clip: clip });;\r\n  const playClip = (clip: string) => socket.emit(\"message\", { type: \"playClip\", clip: clip });;\r\n  const onClipEnded = (clip: any) => socket.emit(\"message\", { type: \"nextClip\", lastClip: clip.slug });\r\n\r\n  const enableClips = () => setClipsEnabled(true);\r\n  const disableClips = () => setClipsEnabled(false);\r\n\r\n  const clipQueue = (data: object[]) => setClipsQueue(data);\r\n\r\n  const newClip = (clip: any) => {\r\n    if (clip) {\r\n      if (!clipsEnabled) setClipsEnabled(true);\r\n\r\n      if (clip.status === 404) {\r\n        return socket.emit(\"message\", { type: \"nextClip\", lastClip: clip });\r\n      }\r\n\r\n      setCurrentClip(clip);\r\n      console.log(clip);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (data: any) => {\r\n      console.log(data)\r\n      switch (data.type) {\r\n        case \"enableClips\":\r\n          return enableClips();\r\n        case \"disableClips\":\r\n          return disableClips();\r\n        case \"newClip\":\r\n          return newClip(data.clip);\r\n        case \"clipQueue\":\r\n          return clipQueue(data.clips);\r\n        default:\r\n          return;\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"container\">\r\n      <div className=\"row\">\r\n        <ReactPlayer\r\n          className=\"clip-player\" url={currentClip !== null ? currentClip.video_url : \"\"}\r\n          // playing\r\n          controls\r\n          onEnded={() => onClipEnded(currentClip)}\r\n          volume={0.1} />\r\n      </div>\r\n\r\n      <div className=\"row clip-section\">\r\n        <div className=\"header-text\">Clip Management</div>\r\n        <div className=\"clips\">\r\n          <Grid container spacing={2}>\r\n            {clipsQueue && clipsQueue.map((clip: any) => (\r\n              <TwitchClip\r\n                removeClip={(slug: string) => removeClip(slug)}\r\n                playClip={(slug: string) => playClip(slug)}\r\n                slug={clip.slug}\r\n                thumbnail={clip.thumbnail_url}\r\n                title={clip.title} />\r\n            ))}\r\n\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}