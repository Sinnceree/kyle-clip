{"version":3,"sources":["core/pulse.ts","core/state.ts","Firebase/index.ts","core/actions.ts","core/index.ts","components/TwitchClip/TwitchClip.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["App","Pulse","framework","React","isAuthenticated","State","loading","user","playerVolume","persist","app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","login","password","a","Firebase","auth","signInWithEmailAndPassword","error","message","checkAuthentication","core","state","set","logout","signOut","API","baseURL","options","actions","routes","TwitchClip","props","Grid","item","xs","className","onClick","playClip","removeClip","src","thumbnail","alt","title","socket","socketIOClient","usePulse","useState","clipsQueue","setClipsQueue","setPassword","currentClip","setCurrentClip","clipsEnabled","setClipsEnabled","playerRef","createRef","useEffect","on","data","console","log","type","clip","status","emit","lastClip","newClip","clipQueue","clips","onAuthStateChanged","setError","loggedIn","video","document","querySelector","addEventListener","event","volume","Container","Fragment","ref","url","video_url","playing","controls","onEnded","id","container","spacing","map","slug","thumbnail_url","value","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9ec00a58.chunk.js","sourcesContent":["import Pulse from \"pulse-framework\"\r\nimport React from \"react\"\r\n\r\nexport const App = new Pulse({\r\n  framework: React,\r\n})","import { App } from \"./pulse\"\r\n\r\nexport const isAuthenticated = App.State<boolean>(false)\r\nexport const loading = App.State<boolean>(true)\r\nexport const user = App.State<any>(null)\r\nexport const playerVolume = App.State<number>(0.1).persist(\"player_volume\")","import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\n\r\nconst app = firebase.initializeApp({\r\n\tapiKey: \"AIzaSyA5PVO7p1qPr_nVrzsuXwFqySVBmSgAxqU\",\r\n  authDomain: \"vulture-84cb9.firebaseapp.com\",\r\n  projectId: \"vulture-84cb9\",\r\n  storageBucket: \"vulture-84cb9.appspot.com\",\r\n  messagingSenderId: \"738247494836\",\r\n  appId: \"1:738247494836:web:cdd28678f03fd3f6d05be1\"\r\n})\r\n\r\nexport default app","import firebase from \"firebase\"\r\nimport core from \".\"\r\nimport Firebase from \"../Firebase\"\r\n\r\nexport const login = async (password: string) => {\r\n\t// If we make it here we have a email to use on login\r\n\ttry {\r\n\t\tawait Firebase.auth().signInWithEmailAndPassword(\"kyle@clips.com\", password)\r\n\t\treturn { error: false, message: null }\r\n\t} catch (error) {\r\n\t\treturn { error: true, message: error.message }\r\n\t}\r\n\r\n}\r\n\r\nexport const checkAuthentication = async (user: firebase.User | null) => {\r\n\r\n\tif (user) {\r\n\t\tcore.state.isAuthenticated.set(true)\r\n\t\tcore.state.user.set(user)\r\n\t}\r\n\tcore.state.loading.set(false)\r\n}\r\n\r\n\r\nexport const logout = async () => {\r\n\tcore.state.isAuthenticated.set(false)\r\n\tcore.state.user.set(null)\r\n\tawait Firebase.auth().signOut()\r\n}\r\n","import { App } from \"./pulse\"\r\nimport * as state from \"./state\"\r\nimport * as routes from \"./routes\"\r\nimport * as actions from \"./actions\"\r\n\r\nexport const API = App.API({\r\n\tbaseURL: \"/v1\",\r\n\toptions: {},\r\n})\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n\tstate: { ...state },\r\n\tactions: { ...actions },\r\n\troutes: { ...routes },\r\n\tAPI,\r\n}","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ninterface TwitchClipInterface {\r\n  playClip: () => void;\r\n  removeClip: () => void;\r\n  thumbnail: string;\r\n  slug: string;\r\n  title: string;\r\n}\r\n\r\n\r\nconst TwitchClip = (props: TwitchClipInterface) => {\r\n  return (\r\n    <Grid item xs={2}>\r\n      <div className=\"clip-box\">\r\n        <div className=\"clip-img\">\r\n          <div className=\"clip-hover\">\r\n            <button onClick={props.playClip}>Play</button>\r\n            <button onClick={props.removeClip}>Remove</button>\r\n          </div>\r\n          <img src={props.thumbnail} alt=\"thumb\" />\r\n        </div>\r\n        <div className=\"title\">{props.title}</div>\r\n      </div>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default TwitchClip;","import React, { useState, useEffect, createRef } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport core from \"./core\"\r\nimport firebase from \"./Firebase\"\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport ReactPlayer from \"react-player\"\r\nimport TwitchClip from \"./components/TwitchClip/TwitchClip\";\r\n\r\nimport \"./assets/main.css\";\r\nimport { usePulse } from \"pulse-framework\";\r\n// const socket = socketIOClient(\"http://localhost:5000/\");\r\nconst socket = socketIOClient(\"https://kyle-twitchbot.herokuapp.com/\");\r\n\r\nconst App = () => {\r\n  // Pulse state\r\n  const isAuthenticated = usePulse(core.state.isAuthenticated)\r\n  const playerVolume = usePulse(core.state.playerVolume)\r\n  const loading = usePulse(core.state.loading)\r\n  const [clipsQueue, setClipsQueue] = useState<object[]>([]);\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [currentClip, setCurrentClip] = useState<any>(null);\r\n  const [clipsEnabled, setClipsEnabled] = useState<boolean>(false);\r\n  const playerRef = createRef<any>()\r\n\r\n  const removeClip = (clip: string) => socket.emit(\"message\", { type: \"removeClip\", clip: clip });\r\n  const playClip = (clip: string) => socket.emit(\"message\", { type: \"playClip\", clip: clip });\r\n  const clipsEmpty = () => setCurrentClip(null);\r\n\r\n  const onClipEnded = (clip: any) => {\r\n    if (clip) {\r\n      socket.emit(\"message\", { type: \"nextClip\", lastClip: clip.id })\r\n    }\r\n  }\r\n\r\n  const enableClips = () => setClipsEnabled(true);\r\n  const disableClips = () => setClipsEnabled(false);\r\n\r\n  const clipQueue = (data: object[]) => setClipsQueue(data);\r\n\r\n  const newClip = (clip: any) => {\r\n    if (clip) {\r\n      if (!clipsEnabled) setClipsEnabled(true);\r\n\r\n      if (clip.status === 404) {\r\n        return socket.emit(\"message\", { type: \"nextClip\", lastClip: clip });\r\n      }\r\n\r\n      setCurrentClip(clip);\r\n      console.log(clip);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (data: any) => {\r\n      console.log(data)\r\n      switch (data.type) {\r\n        case \"enableClips\":\r\n          return enableClips();\r\n        case \"disableClips\":\r\n          return disableClips();\r\n        case \"newClip\":\r\n          return newClip(data.clip);\r\n        case \"clipQueue\":\r\n          return clipQueue(data.clips);\r\n        case \"clipsEmpty\":\r\n          return clipsEmpty();\r\n        default:\r\n          return;\r\n      }\r\n    });\r\n    firebase.auth().onAuthStateChanged((user) => core.actions.checkAuthentication(user))\r\n  }, []);\r\n\r\n  const [error, setError] = useState<null | string>(null)\r\n  const login = async () => {\r\n    const loggedIn = await core.actions.login(password)\r\n    if (loggedIn.error) {\r\n      setError(loggedIn.message)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      const video = document.querySelector(\"video\");\r\n      if (video) {\r\n        video.addEventListener(\"volumechange\", (event) => {\r\n          core.state.playerVolume.set(video.volume)\r\n        });\r\n      }\r\n    }\r\n  }, [loading])\r\n\r\n  return (\r\n    <Container className=\"container\">\r\n\r\n      {!loading && !isAuthenticated ?\r\n        <div className=\"login\">\r\n          <label>Login To View</label>\r\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n          <button onClick={login}>Login</button>\r\n          {error && <p className=\"error\">{error}</p>}\r\n        </div>\r\n        :\r\n        <React.Fragment>\r\n          <div className=\"row\">\r\n            <ReactPlayer\r\n              ref={playerRef}\r\n              className=\"clip-player\" url={currentClip !== null ? currentClip.video_url : \"\"}\r\n              playing\r\n              controls\r\n              volume={playerVolume}\r\n              onEnded={() => onClipEnded(currentClip)} />\r\n          </div>\r\n\r\n\r\n          <div className=\"row clip-section\">\r\n            <div className=\"header-text\">Clip Management</div>\r\n\r\n            <div className=\"clips\">\r\n              <Grid container spacing={2}>\r\n                {clipsQueue && clipsQueue.map((clip: any) => (\r\n                  <TwitchClip\r\n                    removeClip={() => removeClip(clip.id)}\r\n                    playClip={() => playClip(clip.id)}\r\n                    slug={clip.id}\r\n                    thumbnail={clip.thumbnail_url}\r\n                    title={clip.title} />\r\n                ))}\r\n\r\n              </Grid>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      }\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}