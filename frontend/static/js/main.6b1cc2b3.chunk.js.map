{"version":3,"sources":["core/pulse.ts","core/state.ts","core/routes.ts","Firebase/index.ts","core/actions.ts","core/index.ts","components/TwitchClip/TwitchClip.tsx","components/AutoplayToggle/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["App","Pulse","framework","React","isAuthenticated","State","token","persist","loading","user","playerVolume","autoPlayClip","toggleClips","toggle","a","API","post","data","playClip","clipId","removeClip","nextClip","app","firebase","initializeApp","apiKey","process","authDomain","REACT_APP_FIREBAS_AUTH_DOMAIN","projectId","storageBucket","messagingSenderId","appId","login","password","Firebase","auth","signInWithEmailAndPassword","error","message","checkAuthentication","core","state","set","currentUser","getIdToken","config","options","headers","uid","toggleClipMode","routes","logout","signOut","baseURL","actions","TwitchClip","props","className","onClick","src","thumbnail","alt","title","AutoplayToggle","usePulse","type","onChange","e","target","checked","socket","socketIOClient","useState","clipsQueue","setClipsQueue","setPassword","currentClip","setCurrentClip","clipsEnabled","setClipsEnabled","playerRef","createRef","useEffect","on","console","log","clip","status","id","newClip","clipQueue","clips","onAuthStateChanged","setError","loggedIn","video","document","querySelector","addEventListener","event","volume","Fragment","ref","url","video_url","playing","controls","onEnded","style","marginBottom","marginTop","length","map","slug","thumbnail_url","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6b1cc2b3.chunk.js","sourcesContent":["import Pulse from \"pulse-framework\"\r\nimport React from \"react\"\r\n\r\nexport const App = new Pulse({\r\n  framework: React,\r\n})","import { App } from \"./pulse\"\r\n\r\nexport const isAuthenticated = App.State<boolean>(false)\r\nexport const token = App.State<string>(\"\").persist(\"auth_token\")\r\nexport const loading = App.State<boolean>(true)\r\nexport const user = App.State<any>(null)\r\nexport const playerVolume = App.State<number>(0.1).persist(\"player_volume\")\r\nexport const autoPlayClip = App.State<boolean>(true).persist(\"auto_play_clip\")","import { API } from \"./index\"\r\n\r\nexport const toggleClips = async (toggle: boolean): Promise<{ success: boolean, message: string }> => {\r\n  return (await API.post(`toggleClips/`, { toggle })).data\r\n}\r\n\r\nexport const playClip = async (clipId: string): Promise<{ success: boolean, message: string }> => {\r\n  return (await API.post(`playClip/`, { clipId })).data\r\n}\r\n\r\nexport const removeClip = async (clipId: string): Promise<{ success: boolean, message: string }> => {\r\n  return (await API.post(`removeClip/`, { clipId })).data\r\n}\r\n\r\nexport const nextClip = async (clipId: string): Promise<{ success: boolean, message: string }> => {\r\n  return (await API.post(`nextClip/`, { clipId })).data\r\n}","import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBAS_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGE_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_id\r\n})\r\n\r\nexport default app","import firebase from \"firebase\"\r\nimport core from \".\"\r\nimport Firebase from \"../Firebase\"\r\n\r\nexport const login = async (password: string) => {\r\n\t// If we make it here we have a email to use on login\r\n\ttry {\r\n\t\tawait Firebase.auth().signInWithEmailAndPassword(\"kyle@clips.com\", password)\r\n\t\treturn { error: false, message: null }\r\n\t} catch (error) {\r\n\t\treturn { error: true, message: error.message }\r\n\t}\r\n\r\n}\r\n\r\nexport const checkAuthentication = async (user: firebase.User | null) => {\r\n\r\n\tif (user) {\r\n\t\tcore.state.isAuthenticated.set(true)\r\n\t\tcore.state.user.set(user)\r\n\r\n\t\tconst token = await firebase.auth().currentUser?.getIdToken(true);\r\n\t\tcore.state.token.set(token)\r\n\t\tcore.API.config.options.headers = {\r\n\t\t\t\"token\": token!,\r\n\t\t\t\"uid\": user.uid\r\n\t\t}\r\n\t}\r\n\tcore.state.loading.set(false)\r\n}\r\n\r\nexport const toggleClipMode = async (toggle: boolean) => {\r\n\tawait core.routes.toggleClips(toggle);\r\n}\r\n\r\nexport const playClip = async (clipId: string) => {\r\n\tawait core.routes.playClip(clipId);;\r\n}\r\n\r\nexport const removeClip = async (clipId: string) => {\r\n\tawait core.routes.removeClip(clipId);;\r\n}\r\n\r\nexport const nextClip = async (clipId: string) => {\r\n\tawait core.routes.nextClip(clipId);;\r\n}\r\n\r\nexport const logout = async () => {\r\n\tcore.state.isAuthenticated.set(false)\r\n\tcore.state.user.set(null)\r\n\tawait Firebase.auth().signOut()\r\n}\r\n","import { App } from \"./pulse\"\r\nimport * as state from \"./state\"\r\nimport * as routes from \"./routes\"\r\nimport * as actions from \"./actions\"\r\n\r\nexport const API = App.API({\r\n\tbaseURL: \"https://kyle-twitchbot.herokuapp.com/v1\",\r\n\toptions: {},\r\n})\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n\tstate: { ...state },\r\n\tactions: { ...actions },\r\n\troutes: { ...routes },\r\n\tAPI,\r\n}","import React from \"react\";\r\ninterface TwitchClipInterface {\r\n  playClip: () => void;\r\n  removeClip: () => void;\r\n  thumbnail: string;\r\n  slug: string;\r\n  title: string;\r\n}\r\n\r\n\r\nconst TwitchClip = (props: TwitchClipInterface) => {\r\n\r\n  return (\r\n    <div className=\"clip-box\">\r\n      <div className=\"clip-img\">\r\n        <div className=\"clip-hover\">\r\n          <button onClick={props.playClip}>Play</button>\r\n          <button onClick={props.removeClip}>Remove</button>\r\n        </div>\r\n        <img src={props.thumbnail} alt=\"thumb\" />\r\n      </div>\r\n      <div className=\"title\">{props.title}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TwitchClip;","import React from \"react\"\r\nimport { usePulse } from \"pulse-framework\";\r\nimport core from \"../../core\"\r\n\r\nconst AutoplayToggle = () => {\r\n  const autoPlayClip = usePulse(core.state.autoPlayClip)\r\n  return (\r\n    <div className=\"autoplay\">\r\n      <p>Autoplay</p>\r\n      <label className=\"switch\">\r\n        <input type=\"checkbox\" onChange={(e) => core.state.autoPlayClip.set(e.target.checked)} checked={autoPlayClip} />\r\n        <span className=\"slider\"></span>\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AutoplayToggle","import React, { useState, useEffect, createRef } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport core from \"./core\"\r\nimport firebase from \"./Firebase\"\r\nimport ReactPlayer from \"react-player\"\r\nimport TwitchClip from \"./components/TwitchClip/TwitchClip\";\r\nimport { usePulse } from \"pulse-framework\";\r\nimport \"./assets/main.scss\";\r\nimport AutoplayToggle from \"./components/AutoplayToggle\";\r\n\r\n\r\n// const socket = socketIOClient(\"http://localhost:5000/\");\r\nconst socket = socketIOClient(\"https://kyle-twitchbot.herokuapp.com\");\r\n\r\nconst App = () => {\r\n  // Pulse state\r\n  const isAuthenticated = usePulse(core.state.isAuthenticated)\r\n  const autoPlayClip = usePulse(core.state.autoPlayClip)\r\n  const playerVolume = usePulse(core.state.playerVolume)\r\n  const loading = usePulse(core.state.loading)\r\n  const [clipsQueue, setClipsQueue] = useState<object[]>([]);\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [currentClip, setCurrentClip] = useState<any>(null);\r\n  const [clipsEnabled, setClipsEnabled] = useState<boolean>(false);\r\n  const playerRef = createRef<any>()\r\n\r\n  const removeClip = (clip: string) => {\r\n    core.actions.removeClip(clip);\r\n  };\r\n\r\n  const playClip = (clip: string) => {\r\n    core.actions.playClip(clip);\r\n  };\r\n\r\n  const clipsEmpty = () => setCurrentClip(null);\r\n\r\n  const onClipEnded = (clip: any) => {\r\n    if (clip) {\r\n      core.actions.nextClip(clip.id)\r\n    }\r\n  }\r\n\r\n  const enableClips = () => setClipsEnabled(true);\r\n  const disableClips = () => setClipsEnabled(false);\r\n\r\n  const clipQueue = (data: object[]) => setClipsQueue(data);\r\n\r\n  const newClip = (clip: any) => {\r\n    if (clip) {\r\n      if (!clipsEnabled) setClipsEnabled(true);\r\n\r\n      if (clip.status === 404) {\r\n        return core.actions.nextClip(clip.id)\r\n      }\r\n\r\n      setCurrentClip(clip);\r\n      console.log(clip);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (data: any) => {\r\n      console.log(data)\r\n      switch (data.type) {\r\n        case \"enableClips\":\r\n          return enableClips();\r\n        case \"disableClips\":\r\n          return disableClips();\r\n        case \"newClip\":\r\n          return newClip(data.clip);\r\n        case \"clipQueue\":\r\n          return clipQueue(data.clips);\r\n        case \"clipsEmpty\":\r\n          return clipsEmpty();\r\n        case \"clipsEnabledStaus\":\r\n          return setClipsEnabled(data.status)\r\n        default:\r\n          return;\r\n      }\r\n    });\r\n    firebase.auth().onAuthStateChanged((user) => core.actions.checkAuthentication(user))\r\n  }, []);\r\n\r\n  const [error, setError] = useState<null | string>(null)\r\n  const login = async () => {\r\n    const loggedIn = await core.actions.login(password)\r\n    if (loggedIn.error) {\r\n      setError(loggedIn.message)\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      const video = document.querySelector(\"video\");\r\n      if (video) {\r\n        video.addEventListener(\"volumechange\", (event) => {\r\n          core.state.playerVolume.set(video.volume)\r\n        });\r\n      }\r\n    }\r\n  }, [loading, currentClip])\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {!loading && !isAuthenticated ?\r\n        <div className=\"login\">\r\n          <label>Login To View</label>\r\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n          <button onClick={login}>Login</button>\r\n          {error && <p className=\"error\">{error}</p>}\r\n        </div>\r\n        :\r\n        <React.Fragment>\r\n          <div className=\"main\">\r\n            <ReactPlayer\r\n              ref={playerRef}\r\n              className=\"clip-player\" url={currentClip !== null ? currentClip.video_url : \"\"}\r\n              playing={autoPlayClip}\r\n              controls\r\n              volume={playerVolume}\r\n              onEnded={() => onClipEnded(currentClip)} />\r\n          </div>\r\n\r\n          <div className=\"bottom-block\">\r\n            <h1 className=\"header-text\" style={{ marginBottom: \"1rem\" }}>Controls</h1>\r\n            <section className=\"controls\">\r\n              < AutoplayToggle />\r\n              {clipsEnabled ?\r\n                <button className=\"btn red\" onClick={() => core.actions.toggleClipMode(false)}>Disable Clips</button>\r\n                :\r\n                <button className=\"btn\" onClick={() => core.actions.toggleClipMode(true)}>Enable Clips</button>\r\n              }\r\n            </section>\r\n\r\n\r\n            <h1 className=\"header-text\" style={{ marginTop: \"2rem\" }}>Queued Clips ({clipsQueue.length})</h1>\r\n            <div className=\"clips-list\">\r\n              {clipsQueue && clipsQueue.map((clip: any) => (\r\n                <TwitchClip\r\n                  removeClip={() => removeClip(clip.id)}\r\n                  playClip={() => playClip(clip.id)}\r\n                  slug={clip.id}\r\n                  thumbnail={clip.thumbnail_url}\r\n                  title={clip.title} />\r\n              ))}\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </React.Fragment>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}